# getStorageItem macro by Isora/kw4k
# takes item from storage then sells or transfers it (todo)
# USAGE: macro getStorageItem -- "ItemHere" "Kafra/Guild" mode loopflag "player_name" item_weight
# EXAMPLE: macro getStorageItem -- "Elemental Origin [2]" "Kafra" selleq 1
# It takes the item Elemental Origin [2] from Kafra storage then sells it.
# NOTE: It takes all the items in storage up to 90% of the characters max weight.
#
# Item/Equipment name should be enclosed with double quotes (""). Case Sensitive.
#
# STORAGES:
#   - Kafra: uses kafra storage
#   - Guild: uses guild storage
#   note: when using guild storage, make sure this character is the only one
#       who's using it at that moment. this doesn't re-engage npcTalk
#
# MODES:
#   - selleq: sell equipment types
#   - sellneq: sell non-equipment types
#   - drop
#   - mail
#   - mailneq
#
# LOOP FLAG:
#   - 1: loops macro until storage is empty of specified item
#   note: if you don't want to loop, just leave it empty. 

macro getStorageItem {
    $storageGet = $.param1
    $storage = $.param2
    $mode = $.param3
    $isLoop = $.param4
    $mailTarget = $.param5
    $mailItemWeight = $.param6
    $guildNpc = 147 171 r0 n
    $kafraNpc = 164 175 c r1 n
    switch ($storage) {
        case (== Guild) {
            $storageNpc = $guildNpc
        }
        case (== Kafra) {
            $storageNpc = $kafraNpc
        }
    }
    log Checking storage
    do move prontera 155 175
    do talknpc $storageNpc
    log Checking for $storageGet
    if (@storamount($storageGet) > 0) {
        call itemGet -- "$storageGet"
    }
    do storage close
    log Done..
    # modes: to do lol.
    switch($mode) {
        case (== selleq) {
            log MODE: SELL EQUIPMENT TYPE
            do talknpc 147 175 s
            if (@invamount($storageGet) > 0) {
                call sellItem -- "$storageGet"
            log Sell done!
            }
        }
        
        case (== sellneq) {
            log MODE: SELL NON-EQUIPMENT TYPE
            do talknpc 147 175 s
            do sell @inventory($storageGet)
            do sell done
            log Sell done!
        }

        case (== drop) {
            log MODE: DROP ITEM
            call throwTrash -- "$storageGet"
        }

        case (== mail) {
            log MODE: SENDING MAIL
            call mailItem -- "$storageGet" "$mailTarget"
        }

        case (== mailneq) {
            log MODE: SENDING MAIL
            call mailItemNeq -- "$storageGet" "$mailTarget" $mailItemWeight
        }
    }
    if ((@storamount($storageGet) > 0) && ($isLoop == 1)) {
        log Looping getStorageItem macro!
        call getStorageItem -- "$storageGet" "$storage" $mode $isLoop
    }
    log getStorageItem Macro END!
    stop
}

macro sellItem {
    $itemToSell = $.param1
    $itemCount = @invamount($itemToSell)
    $itemIndex = @Inventory($itemToSell)
    $i = 1
    set macro_delay 0.7
    log Adding sell item $itemToSell
    while ((@invamount($itemToSell) > 0) && ($i <= $itemCount)) as loop
        do sell @arg("$itemIndex", $i)
        $i++
    end loop
    do sell done
    stop
}

macro itemGet {
    $storageGetItem = $.param1
    set macro_delay 0.8
    log Taking $storageGetItem from storage..
    while ((@storamount($storageGetItem) > 0) && ($.weight < @eval(0.9 * $.maxweight)) && (@invamount($storageGetItem) < 80)) as loop
        do storage get $storageGetItem
        call itemGet -- "$storageGetItem"
    end loop
    stop
}

macro throwTrash {
    $trash = $.param1
    set macro_delay 0.8
    log Throwing $trash
    while (@invamount($trash) > 0) as loop
        do drop @inventory($trash)
        call throwTrash -- "$trash"
    end as loop
    stop
}


macro mailItem {
    $parcel = $.param1
    $parcelCount = @invamount($parcel)
    $parcelIndex = @Inventory($parcel)
    $i = 1
    $mailMax = 5
    if ($parcelCount < $mailMax) {
        $mailCount = $parcelCount
    } else {
        $mailCount = $mailMax
    }
    $sendTo = $.param2
    log Sending $parcel to $sendTo
    do rodex open
    pause 1
    do rodex write $sendTo
    do rodex settitle $parcel - x $mailCount to $sendTo
    do rodex settarget $sendTo
    do rodex setbody Sending $parcel - x $mailCount to $sendTo
    while ((@invamount($parcel) > 0) && ($i <= $mailCount)) as loop
        do rodex add @arg("$parcelIndex", $i)
        $i++
    end loop
    log adding x $mailCount $parcel to mail done! Sending it..
    do rodex draft
    do rodex send
    do rodex close
    if (@invamount($parcel) > 0) {
        log Mailing more $parcel to $sendTo..
        call mailItem -- "$parcel" "$sendTo"
    }
    stop
}

macro mailItemNeq {
    $parcel = $.param1
    $parcelCount = @invamount($parcel)
    $parcelIndex = @Inventory($parcel)
    $sendTo = $.param2
    $itemWeight = $.param3
    $mailCount = @eval(int(2000/$itemWeight))
    log Sending $parcel to $sendTo
    do rodex open
    pause 1
    do rodex write $sendTo
    do rodex settitle $parcel - x $mailCount to $sendTo
    do rodex settarget $sendTo
    do rodex setbody Sending $parcel - x $mailCount to $sendTo
    do rodex add $parcelIndex $mailCount
    log adding x $mailCount $parcel to mail done! Sending it..
    do rodex draft
    do rodex send
    do rodex close
    if (@invamount($parcel) > 0) {
        log Mailing more $parcel to $sendTo..
        call mailItemNeq -- "$parcel" "$sendTo" $itemWeight
    }
    stop
}
